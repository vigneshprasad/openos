generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                  String                @id @default(cuid())
    name                String?
    email               String?               @unique
    emailVerified       DateTime?
    image               String?
    role                String?
    isOnboarded         Boolean               @default(false)
    isDummy             Boolean?
    createdAt           DateTime              @default(now())
    accounts            Account[]
    sessions            Session[]
    DatabaseResource    DatabaseResource[]
    RazorpayResource    RazorpayResource[]
    BankStatement       BankStatement[]
    funnelSteps         funnelSteps[]
    ActivityDescription ActivityDescription[]
    Transaction         Transaction[]
    CommandHistory      CommandHistory[]
    StripeResource      StripeResource[]
    MixpanelResource    MixpanelResource[]
    DataModel           DataModel[]
    GoogleAnalytics     GoogleAnalytics[]
    Insights            Insights[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DatabaseResource {
    id                       String                     @id @default(cuid())
    name                     String
    type                     String
    port                     Int
    host                     String
    dbName                   String
    username                 String
    password                 String
    createdAt                DateTime                   @default(now())
    updatedAt                DateTime                   @updatedAt
    deletedAt                DateTime?
    userId                   String
    status                   Boolean
    user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
    ResourceSchemaEmbeddings ResourceSchemaEmbeddings[]
    SavedQuery               SavedQuery[]
    PromptRules              SQLQueryPromptAddition[]
    QueryReplacements        SQLQueryModification[]

    @@index([userId])
}

model RazorpayResource {
    id             String    @id @default(cuid())
    name           String
    key_id         String
    key_secret     String
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?
    userId         String
    status         Boolean
    account_number String?
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model MixpanelResource {
    id         String    @id @default(cuid())
    project_id String
    username   String
    password   String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
    userId     String
    status     Boolean
    region     String    @default("US")
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model StripeResource {
    id        String    @id @default(cuid())
    name      String
    secret    String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    userId    String
    status    Boolean
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model ResourceSchemaEmbeddings {
    id                 String           @id @default(cuid())
    name               String           @db.Text
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    deletedAt          DateTime?
    databaseResourceId String
    embeddings         Json
    databaseResource   DatabaseResource @relation(fields: [databaseResourceId], references: [id], onDelete: Cascade)

    @@index([databaseResourceId])
}

model BankStatement {
    id          String        @id @default(cuid())
    name        String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    deletedAt   DateTime?
    userId      String
    url         String
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Transaction Transaction[]

    @@index([userId])
}

model SavedQuery {
    id                 String           @id @default(cuid())
    name               String?
    query              String           @db.Text
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    deletedAt          DateTime?
    databaseResourceId String
    reportKey          String?
    feedback           Int?
    databaseResource   DatabaseResource @relation(fields: [databaseResourceId], references: [id], onDelete: Cascade)

    @@unique([databaseResourceId, reportKey], name: "ReportKeyForDB")
    @@index([databaseResourceId])
}

model funnelSteps {
    id     String @id @default(cuid())
    step1  String
    step2  String
    step3  String
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model ActivityDescription {
    id        String    @id @default(cuid())
    activity  String    @db.Text
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    userId    String    @unique
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Transaction {
    id              String        @id @default(cuid())
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    deletedAt       DateTime?
    userId          String
    date            DateTime
    amount          Decimal
    category        String
    description     String
    balance         Decimal
    bankStatementId String
    user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    bankStatement   BankStatement @relation(fields: [bankStatementId], references: [id], onDelete: Cascade)

    @@unique([amount, userId, date, description, balance], name: "transaction")
    @@index([userId])
    @@index([bankStatementId])
}

model CommandHistory {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    userId    String
    input     String
    output    Json
    feedback  Int       @default(0)
    type      String
    error     Boolean?
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model SQLQueryPromptAddition {
    id                 String           @id @default(cuid())
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    deletedAt          DateTime?
    databaseResourceId String
    rules              String
    databaseResource   DatabaseResource @relation(fields: [databaseResourceId], references: [id], onDelete: Cascade)

    @@index([databaseResourceId])
}

model SQLQueryModification {
    id                 String           @id @default(cuid())
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    deletedAt          DateTime?
    databaseResourceId String
    queryValue         String
    replacementValue   String
    databaseResource   DatabaseResource @relation(fields: [databaseResourceId], references: [id], onDelete: Cascade)

    @@index([databaseResourceId])
}

model DataModel {
    id                  String              @id @default(cuid())
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    deletedAt           DateTime?
    userId              String
    type                String
    name                String
    userFilter          String?
    predictionTimeframe String?
    eventA              String
    eventB              String?
    eventAFrequency     Int?
    predictionWindow    Int?
    description         String
    timeInterval        Int?
    completionStatus    Boolean             @default(false)
    user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    FeatureImportance   FeatureImportance[]
    UserPrediction      UserPrediction[]
    Cohorts             Cohorts[]
    Insights            Insights[]

    @@index([userId])
}

model FeatureImportance {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
    dataModelId String
    featureName String
    importance  Float
    type        String
    dataModel   DataModel @relation(fields: [dataModelId], references: [id], onDelete: Cascade)

    @@index([dataModelId])
}

model UserPrediction {
    id             String    @id @default(cuid())
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?
    dataModelId    String
    userDistinctId String
    dateOfEvent    DateTime
    probability    Float
    userData       Json
    actualResult   Int?
    dataModel      DataModel @relation(fields: [dataModelId], references: [id], onDelete: Cascade)

    @@index([dataModelId])
}

model Cohorts {
    id             String    @id @default(cuid())
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?
    dataModelId    String
    name           String
    attributeName  String
    attributeValue String
    status         Boolean
    dataModel      DataModel @relation(fields: [dataModelId], references: [id], onDelete: Cascade)

    @@index([dataModelId])
}

model GoogleAnalytics {
    id             String    @id @default(cuid())
    name           String
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?
    userId         String
    credentialsUrl String
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    viewId         String

    @@index([userId])
}

model Insights {
    id                 String               @id @default(cuid())
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    deletedAt          DateTime?
    userId             String
    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    modelId            String
    model              DataModel            @relation(fields: [modelId], references: [id], onDelete: Cascade)
    title              String
    description        String
    datePosted         DateTime
    feedback           Int?
    tag                String
    ActionableInsights ActionableInsights[]

    @@index([userId])
    @@index([modelId])
}

model ActionableInsights {
    id           String    @id @default(cuid())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?
    insightId    String
    insight      Insights  @relation(fields: [insightId], references: [id], onDelete: Cascade)
    descrtiption String

    @@index([insightId])
}
