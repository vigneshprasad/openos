generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  role                String?
  isOnboarded         Boolean               @default(false)
  accounts            Account[]
  sessions            Session[]
  DatabaseResource    DatabaseResource[]
  RazorpayResource    RazorpayResource[]
  BankStatement       BankStatement[]
  funnelSteps         funnelSteps[]
  ActivityDescription ActivityDescription[]
  Transaction         Transaction[]
  CommandHistory      CommandHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DatabaseResource {
  id                       String                     @id @default(cuid())
  name                     String
  type                     String
  port                     Int
  host                     String
  dbName                   String
  username                 String
  password                 String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  deletedAt                DateTime?
  userId                   String
  status                   Boolean
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  ResourceSchemaEmbeddings ResourceSchemaEmbeddings[]
  SavedQuery               SavedQuery[]
  PromptRules              SQLQueryPromptAddition[]
  QueryReplacements        SQLQueryModification[]

  @@index([userId])
}

model RazorpayResource {
  id             String    @id @default(cuid())
  name           String
  key_id         String
  key_secret     String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  userId         String
  status         Boolean
  account_number String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ResourceSchemaEmbeddings {
  id                 String           @id @default(cuid())
  name               String           @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  databaseResourceId String
  embeddings         Json
  databaseResource   DatabaseResource @relation(fields: [databaseResourceId], references: [id], onDelete: Cascade)

  @@index([databaseResourceId])
}

model BankStatement {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  userId      String
  url         String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]

  @@index([userId])
}

model SavedQuery {
  id                 String           @id @default(cuid())
  name               String?
  query              String           @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  databaseResourceId String
  reportKey          String?
  feedback           Int?
  databaseResource   DatabaseResource @relation(fields: [databaseResourceId], references: [id], onDelete: Cascade)

  @@unique([databaseResourceId, reportKey], name: "ReportKeyForDB")
  @@index([databaseResourceId])
}

model funnelSteps {
  id     String @id @default(cuid())
  step1  String
  step2  String
  step3  String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ActivityDescription {
  id        String    @id @default(cuid())
  activity  String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Transaction {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  userId          String
  date            DateTime
  amount          Decimal
  category        String
  description     String
  balance         Decimal
  bankStatementId String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankStatement   BankStatement @relation(fields: [bankStatementId], references: [id], onDelete: Cascade)

  @@unique([amount, userId, date, description, balance], name: "transaction")
  @@index([userId])
  @@index([bankStatementId])
}

model CommandHistory {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  input     String
  output    Json
  feedback  Int       @default(0)
  type      String
  error     Boolean?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SQLQueryPromptAddition {
  id                 String           @id @default(cuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  databaseResourceId String
  rules              String
  databaseResource   DatabaseResource @relation(fields: [databaseResourceId], references: [id], onDelete: Cascade)

  @@index([databaseResourceId])
}

model SQLQueryModification {
  id                 String           @id @default(cuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  databaseResourceId String
  queryValue         String
  replacementValue   String
  databaseResource   DatabaseResource @relation(fields: [databaseResourceId], references: [id], onDelete: Cascade)

  @@index([databaseResourceId])
}
